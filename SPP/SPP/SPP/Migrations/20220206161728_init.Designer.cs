// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SPP.Lab2.DB;

namespace SPP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220206161728_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SPP.Lab2.models.DNS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DNS");
                });

            modelBuilder.Entity("SPP.Lab2.models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteOwnerId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SPP.Lab2.models.SiteOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DnsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DnsId");

                    b.ToTable("SiteOwners");
                });

            modelBuilder.Entity("SPP.Lab2.models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageUserTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("SPP.Lab2.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatisticId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StatisticUser", b =>
                {
                    b.Property<int>("StatisticId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("StatisticId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("StatisticUser");
                });

            modelBuilder.Entity("SPP.Lab2.models.Site", b =>
                {
                    b.HasOne("SPP.Lab2.models.SiteOwner", "SiteOwner")
                        .WithMany("Sites")
                        .HasForeignKey("SiteOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteOwner");
                });

            modelBuilder.Entity("SPP.Lab2.models.SiteOwner", b =>
                {
                    b.HasOne("SPP.Lab2.models.DNS", "DNS")
                        .WithMany("SiteOwners")
                        .HasForeignKey("DnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DNS");
                });

            modelBuilder.Entity("SPP.Lab2.models.Statistic", b =>
                {
                    b.HasOne("SPP.Lab2.models.Site", "Site")
                        .WithOne("Statistics")
                        .HasForeignKey("SPP.Lab2.models.Statistic", "SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("StatisticUser", b =>
                {
                    b.HasOne("SPP.Lab2.models.Statistic", null)
                        .WithMany()
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPP.Lab2.models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPP.Lab2.models.DNS", b =>
                {
                    b.Navigation("SiteOwners");
                });

            modelBuilder.Entity("SPP.Lab2.models.Site", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("SPP.Lab2.models.SiteOwner", b =>
                {
                    b.Navigation("Sites");
                });
#pragma warning restore 612, 618
        }
    }
}
